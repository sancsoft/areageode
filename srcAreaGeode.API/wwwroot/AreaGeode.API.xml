<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AreaGeode.API</name>
    </assembly>
    <members>
        <member name="T:AreaGeode.API.Controllers.AreaGeodeCityController">
            <summary>
            Get the cities and geolocations associated with an area code
            </summary>
        </member>
        <member name="M:AreaGeode.API.Controllers.AreaGeodeCityController.#ctor(AreaGeode.Library.DAL.IAreaGeodeCityViewRepository)">
            <summary>
            Construct with configuration so we can make repos
            </summary>
            <param name="repo"></param>
        </member>
        <member name="M:AreaGeode.API.Controllers.AreaGeodeCityController.Get(System.Int32)">
            <summary>
            Get a list of cities and their geolocations associated with an area code
            </summary>
            <param name="areaCode">3-digit area code in US or Canada</param>
            <response code="200">list of objects with cities and geolocation info for area code, empty if no macthing results found</response>
            <response code="500">general error</response>
            <returns>List of cities associated with the areacode and their geolocation info</returns>
        </member>
        <member name="M:AreaGeode.API.Controllers.AreaGeodeCityController.GetByCity(System.String,System.String)">
            <summary>
            Get geolocation information for all area codes associated with a city and optional state/province
            </summary>
            <param name="cityName">name of the city</param>
            <param name="stateAbbr">state or province identifier- optional</param>
            <returns></returns>
        </member>
        <member name="T:AreaGeode.API.Controllers.AreaGeodeController">
            <summary>
            Web API controller to support gettng area code geolocation
            information by area code
            </summary>
        </member>
        <member name="M:AreaGeode.API.Controllers.AreaGeodeController.#ctor(AreaGeode.Library.DAL.IAreaGeodeViewRepository)">
            <summary>
            Construct with the configuration so that we can create repos
            </summary>
            <param name="repo"></param>
        </member>
        <member name="M:AreaGeode.API.Controllers.AreaGeodeController.Get(System.Int32)">
            <summary>
            Get geolocation information for an Area Code in the US or Canada
            </summary>
            <param name="areaCode">area code in US or Canada</param>
            <response code="200">geolocation info for area code</response>
            <response code="404">area code not found</response>
            <response code="500">general error</response>
        </member>
        <member name="M:AreaGeode.API.Controllers.AreaGeodeController.Get(System.String)">
            <summary>
            Get the geolocation information for all area codes within a state or province
            </summary>
            <param name="stateAbbr">Two character state identifier</param>
            <returns>list of area geodes in the state</returns>
        </member>
        <member name="T:AreaGeode.API.HttpException">
            <summary>
            Exception specific to HTTP transactions to facilitate errors from the API.  No idea
            why they don't have this in Core 
            </summary>
        </member>
        <member name="P:AreaGeode.API.HttpException.StatusCode">
            <summary>
            Http status code associated with the exception
            </summary>
        </member>
        <member name="M:AreaGeode.API.HttpException.#ctor(System.String,System.Net.HttpStatusCode)">
            <summary>
            Create an HTTP specific exception with a conventional string exception message
            and an HTTP status code
            </summary>
            <param name="message"></param>
            <param name="code"></param>
        </member>
        <member name="T:AreaGeode.API.Middleware.ErrorHandlingMiddleware">
            <summary>
            Middleware for catching exceptions and returning somewhat useful responses
            for the api
            </summary>
        </member>
        <member name="M:AreaGeode.API.Middleware.ErrorHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Chain construction
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:AreaGeode.API.Middleware.ErrorHandlingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Process exceptions in a context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:AreaGeode.API.Middleware.ErrorHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Generate a JSON response based on the exception.  Sets the response code based on
            our HttpException class or throws a generic 500
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:AreaGeode.API.Program">
            <summary>
            Main program
            </summary>
        </member>
        <member name="M:AreaGeode.API.Program.Main(System.String[])">
            <summary>
            Program entry point; default stuff to start up hosting a WebAPI
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:AreaGeode.API.Startup">
            <summary>
            .NET Core Startup
            </summary>
        </member>
        <member name="M:AreaGeode.API.Startup.#ctor(Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            Constructor
            </summary>
            <param name="env">hosting environment</param>
        </member>
        <member name="P:AreaGeode.API.Startup.Configuration">
            <summary>
            access to the configuration
            </summary>
        </member>
        <member name="M:AreaGeode.API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure the services - dependency injection, MVC, Swagger
            </summary>
            <param name="services">chain of services</param>
        </member>
        <member name="M:AreaGeode.API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            One time confirugration
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="loggerFactory"></param>
        </member>
        <member name="M:AreaGeode.API.Startup.GetXmlCommentsPath">
            <summary>
            Get the path the XML Comments file generated for use by Swagger
            </summary>
            <returns>path to the xml documentation</returns>
        </member>
    </members>
</doc>
